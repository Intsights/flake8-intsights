class ErrorYielder:
    checker_name = 'intsights_checker'
    errors = {
        'I001': r'I001 at each python module, there should be a blank line at the end of the file',
        'I002': r'I002 there should not be any blank lines at the top of a python module',
        'I003': r'I003 no tabs indentation, only spaces',
        'I004': r'I004 only 4 spaces indentation',
        'I005': r'I005 inline comments are not allowed',
        'I006': r'I006 indentation should be gradually added',
        'I011': r'I011 only single quote is allowed in strings',
        'I012': r'I012 duplicate definition',
        'I021': r'I021 only one import module per line',
        'I022': r'I022 never import * from module',
        'I023': r'I023 never from import a module name, just relative from imports',
        'I024': r'I024 never relative import from a module, import the whole module instead',
        'I025': r'I025 never provide a module alias',
        'I026': r'I026 relative imports must be decleared after non-relative ones',
        'I027': r'I027 standard imports and relative imports should be seperated by one newline',
        'I028': r'I027 last import must be spaced with two lines',
        'I031': r'I031 control keywords right after special control definitions must not be spaced',
        'I032': r'I032 control keywords must be divided by space all the time',
        'I033': r'I033 control keywords right after special neighbour control definitions must not be spaced',
        'I034': r'I034 except/finally/else, must not be spaced',
        'I041': r'I041 an empty list/dict must be declared with []/()/{}',
        'I042': r'I042 each list entry must be in its own line',
        'I043': r'I043 each list entry must end with comma',
        'I044': r'I044 a tuple must be enclosed within () and be spaced with 1 new line',
        'I045': r'I045 each subentry opener must be in its own line',
        'I046': r'I046 dict key and value must be on the same line',
        'I047': r'I047 dict keys must not be on the same line',
        'I048': r'I048 dict keys must be identically indented',
        'I049': r'I049 dict key type must be on of the following: a const, a name, of a dict unpack',
        'I051': r'I051 class definition without inheritance should be declared only by "class Name:"',
        'I052': r'I052 main class definition should start with a  "class Name("',
        'I053': r'I053 each base class should be seperated by a new-line',
        'I054': r'I054 each base class should be one indentation level above the main class',
        'I055': r'I055 each base class definition should be ended with a comma',
        'I056': r'I056 classes should never inherit from object',
        'I061': r'I061 function definition with no arguments should be defined as: "def function_name():"',
        'I062': r'I062 function definition with arguments should define the arguments starting by the next line"',
        'I063': r'I063 each function argument should be in a new line',
        'I064': r'I064 each function argument should be in the same indentation level, 1 level above the function definition line',
        'I065': r'I065 each function argument should be ended with a comma',
        'I066': r'I066 there must not be any empty lines in the function definition',
        'I071': r'I071 exception handler parameter name should be "exception"',
        'I081': r'I081 function default parameter must not be mutable',
        'I091': r'I091 never use a builtin name',
        'I092': r'I092 never leave a debug code',
        'I093': r'I093 do not break a line with backslashes',
        'I094': r'I094 functions first arguments should be either self/cls whether it is a standard method or a classmethod correspondingly',
        'I095': r'I095 class name should start with upper case char and must not include underscore',
        'I096': r'I096 unittest TestCase class name should start with the tested module name and end with TestCase',
        'I097': r'I097 function arguments should be lower case',
        'I098': r'I098 use only fstring for string interpolation. format and % are forbidden',
        'I099': r'I099 raising an exception should raise an object not a type',
    }

    @classmethod
    def yield_error(
        cls,
        error_id,
        line_number,
        column_offset,
    ):
        yield (
            line_number,
            column_offset,
            cls.errors[error_id],
            cls.checker_name,
        )
